docker优势
更高效的利用系统资源
由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用
率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高
效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。
更快速的启动时间
传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主
内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约
了开发、测试、部署的时间。
一致的运行环境
开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一
致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行
时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这
类问题。
持续交付和部署
对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运
行。
使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过
Dockerfile 来进行镜像构建，并结合 持续集成(Continuous Integration) 系统进行集成测试，
而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous
Delivery/Deployment) 系统进行自动部署。
而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便
运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。
更轻松的迁移
为什么要用 Docker
17
由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台
上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。
因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行
环境的变化导致应用无法正常运行的情况。
更轻松的维护和扩展
Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的
维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各
个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以
作为基础进一步定制，大大的降低了应用服务的镜像制作成本。

1.卸载旧版本
yum remove docker \
docker-client \
docker-client-latest \
docker-common \
docker-latest \
docker-latest-logrotate \
docker-logrotate \
docker-selinux \
docker-engine-selinux \
docker-engine
2. 安装依赖包
yum install -y yum-utils \
device-mapper-persistent-data \
lvm2
3.设置国内镜像
yum-config-manager \
--add-repo \
https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo
4.查看所有镜像
docker images
保存镜像
docker save mysql |gzip>mysql.tar.gz
装载镜像
docker load -i alpine-latest.tar.gz
删除镜像
docker rmi mysql
删除容器
docker rm start-boot
删除所有容器
docker rm $(docker ps -a -q)
5安装镜像
docker pull  ubuntu:17.10
运行容器
docker run ubuntu:17.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"
-c 在当前控制台输出日志信息
-d 在容器内输出日志信息
docker run -dit ubuntu 创建并运行容器
docker attach 容器ID 进入容器后退出当前容器停止运行
docker exec -it 容器ID /bin/sh 进入容器退出当前容器不会影响容器运行

6容器备份
docker export id
docker import id

7数据卷 可以在容器之间共享和重用,一直存在
docker volume  create my-vool
docker volume  rm my-vool
8

